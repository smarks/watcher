name: Coverage Guard

on:
  pull_request:
    branches: [ main ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to compare with main branch

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up baseline from main branch
      run: |
        set -e
        git checkout main
        python coverage_tracker.py --reset-baseline
        git checkout ${{ github.head_ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run tests and check coverage regression
      run: |
        set -e
        python -m pytest --cov=. --cov-report=xml --cov-report=term-missing -v
        python coverage_tracker.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract coverage data and create summary
      id: coverage
      if: github.event_name == 'pull_request'
      run: |
        # Read baseline data
        if [ -f .coverage_baseline.json ]; then
          MAIN_COVERAGE=$(python -c "import json; data=json.load(open('.coverage_baseline.json')); print(f\"{data['total_coverage']:.1f}\")")
        else
          MAIN_COVERAGE="unknown"
        fi

        # Get current coverage from the last pytest run
        CURRENT_COVERAGE=$(python -m pytest --cov=. --cov-report=term --quiet | grep TOTAL | awk '{print $4}' | sed 's/%//')

        echo "MAIN_COVERAGE=$MAIN_COVERAGE" >> $GITHUB_OUTPUT
        echo "CURRENT_COVERAGE=$CURRENT_COVERAGE" >> $GITHUB_OUTPUT

        # Create GitHub Job Summary
        echo "# 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$MAIN_COVERAGE" != "unknown" ]; then
          echo "| Branch | Coverage | Change |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| main | ${MAIN_COVERAGE}% | baseline |" >> $GITHUB_STEP_SUMMARY

          # Calculate difference using bc or awk
          DIFF=$(echo "$CURRENT_COVERAGE - $MAIN_COVERAGE" | bc 2>/dev/null || echo "$CURRENT_COVERAGE - $MAIN_COVERAGE" | awk '{print $1 - $3}')

          echo "| PR | ${CURRENT_COVERAGE}% | ${DIFF}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add status message based on difference
          if (( $(echo "$DIFF > 2" | bc -l) )); then
            echo "✅ **Coverage improved significantly**" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$DIFF > 0" | bc -l) )); then
            echo "✅ **Coverage improved**" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$DIFF >= -2" | bc -l) )); then
            echo "📊 **Coverage maintained** (within 2% tolerance)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Coverage declined significantly**" >> $GITHUB_STEP_SUMMARY
            echo "> ❌ **Significant regression detected!** This exceeds the 2% tolerance." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ **No baseline available** - this may be the first run." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Current Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${CURRENT_COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
        fi

    # PR commenting removed - use GitHub Actions summary instead
    # The coverage report is available in the workflow summary

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: pr-coverage
        fail_ci_if_error: false
      continue-on-error: true
